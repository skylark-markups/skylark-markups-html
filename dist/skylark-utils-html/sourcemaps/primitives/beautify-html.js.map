{"version":3,"sources":["primitives/beautify-html.js"],"names":["define","beautifyCss","beautifyHtml","ltrim","s","replace","rtrim","style_html","html_source","options","js_beautify","css_beautify","Parser","this","pos","token","current_mode","tags","parent","parentcount","parent1","tag_type","token_text","last_token","last_text","token_type","newlines","indent_content","indent_inner_html","Utils","whitespace","split","single_token","extra_liners","in_array","what","arr","i","length","is_whitespace","text","n","charAt","traverse_whitespace","input_char","input","preserve_newlines","max_preserve_newlines","space_or_wrap","content","line_char_count","wrap_line_length","print_newline","print_indentation","push","get_content","join","indent_handlebars","peek3","substr","get_tag","get_contents_to","name","reg_match","RegExp","lastIndex","reg_array","exec","end_script","index","substring","record_tag","tag","indent_level","retrieve_tag","temp_parent","indent_to_tag","peek","tag_start","tag_end","tag_start_char","comment","space","orig_pos","orig_line_char_count","undefined","get_unformatted","get_comment","tag_index","tag_offset","tag_complete","indexOf","tag_check","toLowerCase","is_unformatted","unformatted","search","output","start_pos","delimiter","matched","orig_tag","min_index","get_token","type","tag_name_type","get_full_indent","level","Array","indent_string","next_tag","match","printer","js_source","indent_character","indent_size","brace_style","force","print_token","print_token_raw","slice","indent","unindent","multi_parser","end_with_newline","parseInt","max_char","indent_char","isNaN","t","tag_name","tag_extracted_from_last_output","_beautifier","script_indent_level","indent_scripts","indentation","white","_level","reindent","sweet_code","html_beautify","beautifyJs"],"mappings":"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","file":"../../primitives/beautify-html.js","sourcesContent":["/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n  The MIT License (MIT)\n\n  Copyright (c) 2007-2013 Einar Lielmanis and contributors.\n\n  Permission is hereby granted, free of charge, to any person\n  obtaining a copy of this software and associated documentation files\n  (the \"Software\"), to deal in the Software without restriction,\n  including without limitation the rights to use, copy, modify, merge,\n  publish, distribute, sublicense, and/or sell copies of the Software,\n  and to permit persons to whom the Software is furnished to do so,\n  subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be\n  included in all copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n\n\n Style HTML\n---------------\n\n  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\n  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>\n    http://jsbeautifier.org/\n\n  Usage:\n    style_html(html_source);\n\n    style_html(html_source, options);\n\n  The options are:\n    indent_inner_html (default false)  — indent <head> and <body> sections,\n    indent_size (default 4)          — indentation size,\n    indent_char (default space)      — character to indent with,\n    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"none\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.\n    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted\n    indent_scripts (default normal)  - \"keep\"|\"separate\"|\"normal\"\n    preserve_newlines (default true) - whether existing line breaks before elements should be preserved\n                                        Only works before elements, not inside tags or for text.\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk\n    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}\n    end_with_newline (false)          - end with a newline\n\n\n    e.g.\n\n    style_html(html_source, {\n      'indent_inner_html': false,\n      'indent_size': 2,\n      'indent_char': ' ',\n      'wrap_line_length': 78,\n      'brace_style': 'expand',\n      'unformatted': ['a', 'sub', 'sup', 'b', 'i', 'u'],\n      'preserve_newlines': true,\n      'max_preserve_newlines': 5,\n      'indent_handlebars': false\n    });\n*/\n\ndefine([\n    \"skylark-utils-css/beautify\",\n    \"skylark-utils-js/beautify\"\n], function(beautifyCss, beautifyHtml) {\n\n    function trim(s) {\n        return s.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    function ltrim(s) {\n        return s.replace(/^\\s+/g, '');\n    }\n\n    function rtrim(s) {\n        return s.replace(/\\s+$/g,'');\n    }\n\n    function style_html(html_source, options, js_beautify, css_beautify) {\n        //Wrapper function to invoke all the necessary constructors and deal with the output.\n\n        var multi_parser,\n            indent_inner_html,\n            indent_size,\n            indent_character,\n            wrap_line_length,\n            brace_style,\n            unformatted,\n            preserve_newlines,\n            max_preserve_newlines,\n            indent_handlebars,\n            end_with_newline;\n\n        options = options || {};\n\n        // backwards compatibility to 1.3.4\n        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) &&\n                (options.max_char !== undefined && parseInt(options.max_char, 10) !== 0)) {\n            options.wrap_line_length = options.max_char;\n        }\n\n        indent_inner_html = (options.indent_inner_html === undefined) ? false : options.indent_inner_html;\n        indent_size = (options.indent_size === undefined) ? 4 : parseInt(options.indent_size, 10);\n        indent_character = (options.indent_char === undefined) ? ' ' : options.indent_char;\n        brace_style = (options.brace_style === undefined) ? 'collapse' : options.brace_style;\n        wrap_line_length =  parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);\n        unformatted = options.unformatted || ['a', 'span', 'img', 'bdo', 'em', 'strong', 'dfn', 'code', 'samp', 'kbd', 'var', 'cite', 'abbr', 'acronym', 'q', 'sub', 'sup', 'tt', 'i', 'b', 'big', 'small', 'u', 's', 'strike', 'font', 'ins', 'del', 'pre', 'address', 'dt', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n        preserve_newlines = (options.preserve_newlines === undefined) ? true : options.preserve_newlines;\n        max_preserve_newlines = preserve_newlines ?\n            (isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10))\n            : 0;\n        indent_handlebars = (options.indent_handlebars === undefined) ? false : options.indent_handlebars;\n        end_with_newline = (options.end_with_newline === undefined) ? false : options.end_with_newline;\n\n        function Parser() {\n\n            this.pos = 0; //Parser position\n            this.token = '';\n            this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT\n            this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values\n                parent: 'parent1',\n                parentcount: 1,\n                parent1: ''\n            };\n            this.tag_type = '';\n            this.token_text = this.last_token = this.last_text = this.token_type = '';\n            this.newlines = 0;\n            this.indent_content = indent_inner_html;\n\n            this.Utils = { //Uilities made available to the various functions\n                whitespace: \"\\n\\r\\t \".split(''),\n                single_token: 'br,input,link,meta,!doctype,basefont,base,area,hr,wbr,param,img,isindex,?xml,embed,?php,?,?='.split(','), //all the single tags for HTML\n                extra_liners: 'head,body,/html'.split(','), //for tags that need a line of whitespace before them\n                in_array: function(what, arr) {\n                    for (var i = 0; i < arr.length; i++) {\n                        if (what === arr[i]) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            };\n\n            // Return true iff the given text is composed entirely of\n            // whitespace.\n            this.is_whitespace = function(text) {\n                for (var n = 0; n < text.length; text++) {\n                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n            this.traverse_whitespace = function() {\n                var input_char = '';\n\n                input_char = this.input.charAt(this.pos);\n                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                    this.newlines = 0;\n                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                        if (preserve_newlines && input_char === '\\n' && this.newlines <= max_preserve_newlines) {\n                            this.newlines += 1;\n                        }\n\n                        this.pos++;\n                        input_char = this.input.charAt(this.pos);\n                    }\n                    return true;\n                }\n                return false;\n            };\n\n            // Append a space to the given content (string array) or, if we are\n            // at the wrap_line_length, append a newline/indentation.\n            this.space_or_wrap = function(content) {\n                if (this.line_char_count >= this.wrap_line_length) { //insert a line when the wrap_line_length is reached\n                    this.print_newline(false, content);\n                    this.print_indentation(content);\n                } else {\n                    this.line_char_count++;\n                    content.push(' ');\n                }\n            };\n\n            this.get_content = function() { //function to capture regular content between tags\n                var input_char = '',\n                    content = [],\n                    space = false; //if a space is needed\n\n                while (this.input.charAt(this.pos) !== '<') {\n                    if (this.pos >= this.input.length) {\n                        return content.length ? content.join('') : ['', 'TK_EOF'];\n                    }\n\n                    if (this.traverse_whitespace()) {\n                        this.space_or_wrap(content);\n                        continue;\n                    }\n\n                    if (indent_handlebars) {\n                        // Handlebars parsing is complicated.\n                        // {{#foo}} and {{/foo}} are formatted tags.\n                        // {{something}} should get treated as content, except:\n                        // {{else}} specifically behaves like {{#if}} and {{/if}}\n                        var peek3 = this.input.substr(this.pos, 3);\n                        if (peek3 === '{{#' || peek3 === '{{/') {\n                            // These are tags and not content.\n                            break;\n                        } else if (this.input.substr(this.pos, 2) === '{{') {\n                            if (this.get_tag(true) === '{{else}}') {\n                                break;\n                            }\n                        }\n                    }\n\n                    input_char = this.input.charAt(this.pos);\n                    this.pos++;\n                    this.line_char_count++;\n                    content.push(input_char); //letter at-a-time (or string) inserted to an array\n                }\n                return content.length ? content.join('') : '';\n            };\n\n            this.get_contents_to = function(name) { //get the full content of a script or style to pass to js_beautify\n                if (this.pos === this.input.length) {\n                    return ['', 'TK_EOF'];\n                }\n                var input_char = '';\n                var content = '';\n                var reg_match = new RegExp('</' + name + '\\\\s*>', 'igm');\n                reg_match.lastIndex = this.pos;\n                var reg_array = reg_match.exec(this.input);\n                var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script\n                if (this.pos < end_script) { //get everything in between the script tags\n                    content = this.input.substring(this.pos, end_script);\n                    this.pos = end_script;\n                }\n                return content;\n            };\n\n            this.record_tag = function(tag) { //function to record a tag and its parent in this.tags Object\n                if (this.tags[tag + 'count']) { //check for the existence of this tag type\n                    this.tags[tag + 'count']++;\n                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n                } else { //otherwise initialize this tag type\n                    this.tags[tag + 'count'] = 1;\n                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n                }\n                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)\n                this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')\n            };\n\n            this.retrieve_tag = function(tag) { //function to retrieve the opening tag to the corresponding closer\n                if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it\n                    var temp_parent = this.tags.parent; //check to see if it's a closable tag.\n                    while (temp_parent) { //till we reach '' (the initial value);\n                        if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it\n                            break;\n                        }\n                        temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree\n                    }\n                    if (temp_parent) { //if we caught something\n                        this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly\n                        this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent\n                    }\n                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...\n                    delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself\n                    if (this.tags[tag + 'count'] === 1) {\n                        delete this.tags[tag + 'count'];\n                    } else {\n                        this.tags[tag + 'count']--;\n                    }\n                }\n            };\n\n            this.indent_to_tag = function(tag) {\n                // Match the indentation level to the last use of this tag, but don't remove it.\n                if (!this.tags[tag + 'count']) {\n                    return;\n                }\n                var temp_parent = this.tags.parent;\n                while (temp_parent) {\n                    if (tag + this.tags[tag + 'count'] === temp_parent) {\n                        break;\n                    }\n                    temp_parent = this.tags[temp_parent + 'parent'];\n                }\n                if (temp_parent) {\n                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];\n                }\n            };\n\n            this.get_tag = function(peek) { //function to get a full tag and parse its type\n                var input_char = '',\n                    content = [],\n                    comment = '',\n                    space = false,\n                    tag_start, tag_end,\n                    tag_start_char,\n                    orig_pos = this.pos,\n                    orig_line_char_count = this.line_char_count;\n\n                peek = peek !== undefined ? peek : false;\n\n                do {\n                    if (this.pos >= this.input.length) {\n                        if (peek) {\n                            this.pos = orig_pos;\n                            this.line_char_count = orig_line_char_count;\n                        }\n                        return content.length ? content.join('') : ['', 'TK_EOF'];\n                    }\n\n                    input_char = this.input.charAt(this.pos);\n                    this.pos++;\n\n                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space\n                        space = true;\n                        continue;\n                    }\n\n                    if (input_char === \"'\" || input_char === '\"') {\n                        input_char += this.get_unformatted(input_char);\n                        space = true;\n\n                    }\n\n                    if (input_char === '=') { //no space before =\n                        space = false;\n                    }\n\n                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {\n                        //no space after = or before >\n                        this.space_or_wrap(content);\n                        space = false;\n                    }\n\n                    if (indent_handlebars && tag_start_char === '<') {\n                        // When inside an angle-bracket tag, put spaces around\n                        // handlebars not inside of strings.\n                        if ((input_char + this.input.charAt(this.pos)) === '{{') {\n                            input_char += this.get_unformatted('}}');\n                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {\n                                input_char = ' ' + input_char;\n                            }\n                            space = true;\n                        }\n                    }\n\n                    if (input_char === '<' && !tag_start_char) {\n                        tag_start = this.pos - 1;\n                        tag_start_char = '<';\n                    }\n\n                    if (indent_handlebars && !tag_start_char) {\n                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] == '{') {\n                            if (input_char === '#' || input_char === '/') {\n                                tag_start = this.pos - 3;\n                            } else {\n                                tag_start = this.pos - 2;\n                            }\n                            tag_start_char = '{';\n                        }\n                    }\n\n                    this.line_char_count++;\n                    content.push(input_char); //inserts character at-a-time (or string)\n\n                    if (content[1] && content[1] === '!') { //if we're in a comment, do something special\n                        // We treat all comments as literals, even more than preformatted tags\n                        // we just look for the appropriate close tag\n                        content = [this.get_comment(tag_start)];\n                        break;\n                    }\n\n                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {\n                        break;\n                    }\n                } while (input_char !== '>');\n\n                var tag_complete = content.join('');\n                var tag_index;\n                var tag_offset;\n\n                if (tag_complete.indexOf(' ') !== -1) { //if there's whitespace, thats where the tag name ends\n                    tag_index = tag_complete.indexOf(' ');\n                } else if (tag_complete[0] === '{') {\n                    tag_index = tag_complete.indexOf('}');\n                } else { //otherwise go with the tag ending\n                    tag_index = tag_complete.indexOf('>');\n                }\n                if (tag_complete[0] === '<' || !indent_handlebars) {\n                    tag_offset = 1;\n                } else {\n                    tag_offset = tag_complete[2] === '#' ? 3 : 2;\n                }\n                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();\n                if (tag_complete.charAt(tag_complete.length - 2) === '/' ||\n                    this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)\n                    if (!peek) {\n                        this.tag_type = 'SINGLE';\n                    }\n                } else if (indent_handlebars && tag_complete[0] === '{' && tag_check === 'else') {\n                    if (!peek) {\n                        this.indent_to_tag('if');\n                        this.tag_type = 'HANDLEBARS_ELSE';\n                        this.indent_content = true;\n                        this.traverse_whitespace();\n                    }\n                } else if (this.is_unformatted(tag_check, unformatted)) { // do not reformat the \"unformatted\" tags\n                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function\n                    content.push(comment);\n                    tag_end = this.pos - 1;\n                    this.tag_type = 'SINGLE';\n                } else if (tag_check === 'script' &&\n                    (tag_complete.search('type') === -1 ||\n                    (tag_complete.search('type') > -1 &&\n                    tag_complete.search(/\\b(text|application)\\/(x-)?(javascript|ecmascript|jscript|livescript)/) > -1))) {\n                    if (!peek) {\n                        this.record_tag(tag_check);\n                        this.tag_type = 'SCRIPT';\n                    }\n                } else if (tag_check === 'style' &&\n                    (tag_complete.search('type') === -1 ||\n                    (tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1))) {\n                    if (!peek) {\n                        this.record_tag(tag_check);\n                        this.tag_type = 'STYLE';\n                    }\n                } else if (tag_check.charAt(0) === '!') { //peek for <! comment\n                    // for comments content is already correct.\n                    if (!peek) {\n                        this.tag_type = 'SINGLE';\n                        this.traverse_whitespace();\n                    }\n                } else if (!peek) {\n                    if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending\n                        this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors\n                        this.tag_type = 'END';\n                    } else { //otherwise it's a start-tag\n                        this.record_tag(tag_check); //push it on the tag stack\n                        if (tag_check.toLowerCase() !== 'html') {\n                            this.indent_content = true;\n                        }\n                        this.tag_type = 'START';\n                    }\n\n                    // Allow preserving of newlines after a start or end tag\n                    if (this.traverse_whitespace()) {\n                        this.space_or_wrap(content);\n                    }\n\n                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line\n                        this.print_newline(false, this.output);\n                        if (this.output.length && this.output[this.output.length - 2] !== '\\n') {\n                            this.print_newline(true, this.output);\n                        }\n                    }\n                }\n\n                if (peek) {\n                    this.pos = orig_pos;\n                    this.line_char_count = orig_line_char_count;\n                }\n\n                return content.join(''); //returns fully formatted tag\n            };\n\n            this.get_comment = function(start_pos) { //function to return comment content in its entirety\n                // this is will have very poor perf, but will work for now.\n                var comment = '',\n                    delimiter = '>',\n                    matched = false;\n\n                this.pos = start_pos;\n                input_char = this.input.charAt(this.pos);\n                this.pos++;\n\n                while (this.pos <= this.input.length) {\n                    comment += input_char;\n\n                    // only need to check for the delimiter if the last chars match\n                    if (comment[comment.length - 1] === delimiter[delimiter.length - 1] &&\n                        comment.indexOf(delimiter) !== -1) {\n                        break;\n                    }\n\n                    // only need to search for custom delimiter for the first few characters\n                    if (!matched && comment.length < 10) {\n                        if (comment.indexOf('<![if') === 0) { //peek for <![if conditional comment\n                            delimiter = '<![endif]>';\n                            matched = true;\n                        } else if (comment.indexOf('<![cdata[') === 0) { //if it's a <[cdata[ comment...\n                            delimiter = ']]>';\n                            matched = true;\n                        } else if (comment.indexOf('<![') === 0) { // some other ![ comment? ...\n                            delimiter = ']>';\n                            matched = true;\n                        } else if (comment.indexOf('<!--') === 0) { // <!-- comment ...\n                            delimiter = '-->';\n                            matched = true;\n                        }\n                    }\n\n                    input_char = this.input.charAt(this.pos);\n                    this.pos++;\n                }\n\n                return comment;\n            };\n\n            this.get_unformatted = function(delimiter, orig_tag) { //function to return unformatted content in its entirety\n\n                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {\n                    return '';\n                }\n                var input_char = '';\n                var content = '';\n                var min_index = 0;\n                var space = true;\n                do {\n\n                    if (this.pos >= this.input.length) {\n                        return content;\n                    }\n\n                    input_char = this.input.charAt(this.pos);\n                    this.pos++;\n\n                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n                        if (!space) {\n                            this.line_char_count--;\n                            continue;\n                        }\n                        if (input_char === '\\n' || input_char === '\\r') {\n                            content += '\\n';\n                            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'\n                for (var i=0; i<this.indent_level; i++) {\n                  content += this.indent_string;\n                }\n                space = false; //...and make sure other indentation is erased\n                */\n                            this.line_char_count = 0;\n                            continue;\n                        }\n                    }\n                    content += input_char;\n                    this.line_char_count++;\n                    space = true;\n\n                    if (indent_handlebars && input_char === '{' && content.length && content[content.length - 2] === '{') {\n                        // Handlebars expressions in strings should also be unformatted.\n                        content += this.get_unformatted('}}');\n                        // These expressions are opaque.  Ignore delimiters found in them.\n                        min_index = content.length;\n                    }\n                } while (content.toLowerCase().indexOf(delimiter, min_index) === -1);\n                return content;\n            };\n\n            this.get_token = function() { //initial handler for token-retrieval\n                var token;\n\n                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript\n                    var type = this.last_token.substr(7);\n                    token = this.get_contents_to(type);\n                    if (typeof token !== 'string') {\n                        return token;\n                    }\n                    return [token, 'TK_' + type];\n                }\n                if (this.current_mode === 'CONTENT') {\n                    token = this.get_content();\n                    if (typeof token !== 'string') {\n                        return token;\n                    } else {\n                        return [token, 'TK_CONTENT'];\n                    }\n                }\n\n                if (this.current_mode === 'TAG') {\n                    token = this.get_tag();\n                    if (typeof token !== 'string') {\n                        return token;\n                    } else {\n                        var tag_name_type = 'TK_TAG_' + this.tag_type;\n                        return [token, tag_name_type];\n                    }\n                }\n            };\n\n            this.get_full_indent = function(level) {\n                level = this.indent_level + level || 0;\n                if (level < 1) {\n                    return '';\n                }\n\n                return Array(level + 1).join(this.indent_string);\n            };\n\n            this.is_unformatted = function(tag_check, unformatted) {\n                //is this an HTML5 block-level link?\n                if (!this.Utils.in_array(tag_check, unformatted)) {\n                    return false;\n                }\n\n                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {\n                    return true;\n                }\n\n                //at this point we have an  tag; is its first child something we want to remain\n                //unformatted?\n                var next_tag = this.get_tag(true /* peek. */ );\n\n                // test next_tag to see if it is just html tag (no external content)\n                var tag = (next_tag || \"\").match(/^\\s*<\\s*\\/?([a-z]*)\\s*[^>]*>\\s*$/);\n\n                // if next_tag comes back but is not an isolated tag, then\n                // let's treat the 'a' tag as having content\n                // and respect the unformatted option\n                if (!tag || this.Utils.in_array(tag, unformatted)) {\n                    return true;\n                } else {\n                    return false;\n                }\n            };\n\n            this.printer = function(js_source, indent_character, indent_size, wrap_line_length, brace_style) { //handles input/output and some other printing functions\n\n                this.input = js_source || ''; //gets the input for the Parser\n                this.output = [];\n                this.indent_character = indent_character;\n                this.indent_string = '';\n                this.indent_size = indent_size;\n                this.brace_style = brace_style;\n                this.indent_level = 0;\n                this.wrap_line_length = wrap_line_length;\n                this.line_char_count = 0; //count to see if wrap_line_length was exceeded\n\n                for (var i = 0; i < this.indent_size; i++) {\n                    this.indent_string += this.indent_character;\n                }\n\n                this.print_newline = function(force, arr) {\n                    this.line_char_count = 0;\n                    if (!arr || !arr.length) {\n                        return;\n                    }\n                    if (force || (arr[arr.length - 1] !== '\\n')) { //we might want the extra line\n                        if ((arr[arr.length - 1] !== '\\n')) {\n                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);\n                        }\n                        arr.push('\\n');\n                    }\n                };\n\n                this.print_indentation = function(arr) {\n                    for (var i = 0; i < this.indent_level; i++) {\n                        arr.push(this.indent_string);\n                        this.line_char_count += this.indent_string.length;\n                    }\n                };\n\n                this.print_token = function(text) {\n                    // Avoid printing initial whitespace.\n                    if (this.is_whitespace(text) && !this.output.length) {\n                        return;\n                    }\n                    if (text || text !== '') {\n                        if (this.output.length && this.output[this.output.length - 1] === '\\n') {\n                            this.print_indentation(this.output);\n                            text = ltrim(text);\n                        }\n                    }\n                    this.print_token_raw(text);\n                };\n\n                this.print_token_raw = function(text) {\n                    // If we are going to print newlines, truncate trailing\n                    // whitespace, as the newlines will represent the space.\n                    if (this.newlines > 0) {\n                        text = rtrim(text);\n                    }\n\n                    if (text && text !== '') {\n                        if (text.length > 1 && text[text.length - 1] === '\\n') {\n                            // unformatted tags can grab newlines as their last character\n                            this.output.push(text.slice(0, -1));\n                            this.print_newline(false, this.output);\n                        } else {\n                            this.output.push(text);\n                        }\n                    }\n\n                    for (var n = 0; n < this.newlines; n++) {\n                        this.print_newline(n > 0, this.output);\n                    }\n                    this.newlines = 0;\n                };\n\n                this.indent = function() {\n                    this.indent_level++;\n                };\n\n                this.unindent = function() {\n                    if (this.indent_level > 0) {\n                        this.indent_level--;\n                    }\n                };\n            };\n            return this;\n        }\n\n        /*_____________________--------------------_____________________*/\n\n        multi_parser = new Parser(); //wrapping functions Parser\n        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values\n\n        while (true) {\n            var t = multi_parser.get_token();\n            multi_parser.token_text = t[0];\n            multi_parser.token_type = t[1];\n\n            if (multi_parser.token_type === 'TK_EOF') {\n                break;\n            }\n\n            switch (multi_parser.token_type) {\n                case 'TK_TAG_START':\n                    multi_parser.print_newline(false, multi_parser.output);\n                    multi_parser.print_token(multi_parser.token_text);\n                    if (multi_parser.indent_content) {\n                        multi_parser.indent();\n                        multi_parser.indent_content = false;\n                    }\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_STYLE':\n                case 'TK_TAG_SCRIPT':\n                    multi_parser.print_newline(false, multi_parser.output);\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_END':\n                    //Print new line only if the tag has no content and has child\n                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {\n                        var tag_name = multi_parser.token_text.match(/\\w+/)[0];\n                        var tag_extracted_from_last_output = null;\n                        if (multi_parser.output.length) {\n                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\\s*(\\w+)/);\n                        }\n                        if (tag_extracted_from_last_output === null ||\n                            tag_extracted_from_last_output[1] !== tag_name) {\n                            multi_parser.print_newline(false, multi_parser.output);\n                        }\n                    }\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_SINGLE':\n                    // Don't add a newline before elements that should remain unformatted.\n                    var tag_check = multi_parser.token_text.match(/^\\s*<([a-z-]+)/i);\n                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {\n                        multi_parser.print_newline(false, multi_parser.output);\n                    }\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_TAG_HANDLEBARS_ELSE':\n                    multi_parser.print_token(multi_parser.token_text);\n                    if (multi_parser.indent_content) {\n                        multi_parser.indent();\n                        multi_parser.indent_content = false;\n                    }\n                    multi_parser.current_mode = 'CONTENT';\n                    break;\n                case 'TK_CONTENT':\n                    multi_parser.print_token(multi_parser.token_text);\n                    multi_parser.current_mode = 'TAG';\n                    break;\n                case 'TK_STYLE':\n                case 'TK_SCRIPT':\n                    if (multi_parser.token_text !== '') {\n                        multi_parser.print_newline(false, multi_parser.output);\n                        var text = multi_parser.token_text,\n                            _beautifier,\n                            script_indent_level = 1;\n                        if (multi_parser.token_type === 'TK_SCRIPT') {\n                            _beautifier = typeof js_beautify === 'function' && js_beautify;\n                        } else if (multi_parser.token_type === 'TK_STYLE') {\n                            _beautifier = typeof css_beautify === 'function' && css_beautify;\n                        }\n\n                        if (options.indent_scripts === \"keep\") {\n                            script_indent_level = 0;\n                        } else if (options.indent_scripts === \"separate\") {\n                            script_indent_level = -multi_parser.indent_level;\n                        }\n\n                        var indentation = multi_parser.get_full_indent(script_indent_level);\n                        if (_beautifier) {\n                            // call the Beautifier if avaliable\n                            text = _beautifier(text.replace(/^\\s*/, indentation), options);\n                        } else {\n                            // simply indent the string otherwise\n                            var white = text.match(/^\\s*/)[0];\n                            var _level = white.match(/[^\\n\\r]*$/)[0].split(multi_parser.indent_string).length - 1;\n                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);\n                            text = text.replace(/^\\s*/, indentation)\n                                .replace(/\\r\\n|\\r|\\n/g, '\\n' + reindent)\n                                .replace(/\\s+$/, '');\n                        }\n                        if (text) {\n                            multi_parser.print_token_raw(text);\n                            multi_parser.print_newline(true, multi_parser.output);\n                        }\n                    }\n                    multi_parser.current_mode = 'TAG';\n                    break;\n                default:\n                    // We should not be getting here but we don't want to drop input on the floor\n                    // Just output the text and move on\n                    if (multi_parser.token_text !== '') {\n                        multi_parser.print_token(multi_parser.token_text);\n                    }\n                    break;\n            }\n            multi_parser.last_token = multi_parser.token_type;\n            multi_parser.last_text = multi_parser.token_text;\n        }\n        var sweet_code = multi_parser.output.join('').replace(/[\\r\\n\\t ]+$/, '');\n        if (end_with_newline) {\n            sweet_code += '\\n';\n        }\n        return sweet_code;\n    }\n\n\n    return {\n      html_beautify: function(html_source, options) {\n        return style_html(html_source, options, beautifyJs, beautifyCss);\n      }\n    };\n\n});\n"]}